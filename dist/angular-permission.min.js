/**
 * angular-permission
 * Route permission and access control as simple as it can get
 * @version v1.2.0 - 2015-11-19
 * @link http://www.rafaelvidaurre.com
 * @author Rafael Vidaurre <narzerus@gmail.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

!function () {
  "use strict";
  angular.module("permission", ["ui.router"]).run(["$rootScope", "Permission", "$state", "$q", function (a, b, c, d) {
    a.$on("$stateChangeStart", function (e, f, g, h, i) {
      if (!f.$$finishAuthorize) {
        var j;
        if (f.data && f.data.permissions ? j = f.data.permissions : f.permissions && (console.log("Deprecation Warning: permissions should be set inside the `data` key "), console.log("Setting permissions for a state outside `data` will be depracated in version 1"), j = f.permissions), j) {
          if (e.preventDefault(), f = angular.extend({$$finishAuthorize: !0}, f), a.$broadcast("$stateChangePermissionStart", f, g).defaultPrevented)return;
          b.authorize(j, g).then(function () {
            a.$broadcast("$stateChangeStart", f, g, h, i).defaultPrevented || (a.$broadcast("$stateChangePermissionAccepted", f, g), c.go(f.name, g, {notify: !1}).then(function () {
              a.$broadcast("$stateChangeSuccess", f, g, h, i)
            }))
          }, function () {
            if (!a.$broadcast("$stateChangeStart", f, g, h, i).defaultPrevented) {
              a.$broadcast("$stateChangePermissionDenied", f, g);
              var b = j.redirectTo;
              angular.isFunction(b) ? (b = b(), d.when(b).then(function (a) {
                a && c.go(a, g)
              })) : b && c.go(b, g)
            }
          })
        }
      }
    })
  }])
}(), function () {
  "use strict";
  angular.module("permission").directive("permissionOnly", ["$log", "Permission", function (a, b) {
    return {
      restrict: "A", link: function (c, d, e) {
        try {
          b.authorize({only: e.permissionOnly.replace(/\s/g, "").split(",")}).then(function () {
            d.removeClass("ng-hide")
          })["catch"](function () {
            d.addClass("ng-hide")
          })
        } catch (f) {
          d.addClass("ng-hide"), a.error(f.message)
        }
      }
    }
  }]).directive("permissionExcept", ["$log", "Permission", function (a, b) {
    return {
      restrict: "A", link: function (c, d, e) {
        try {
          b.authorize({except: e.permissionExcept.replace(/\s/g, "").split(",")}).then(function () {
            d.removeClass("ng-hide")
          })["catch"](function () {
            d.addClass("ng-hide")
          })
        } catch (f) {
          d.addClass("ng-hide"), a.error(f.message)
        }
      }
    }
  }])
}(), function () {
  "use strict";
  angular.module("permission").provider("Permission", function () {
    var a = {}, b = function (a, b) {
      if (!angular.isString(a))throw new Error("Role name must be a string");
      if (!angular.isFunction(b))throw new Error("Validation function not provided correctly")
    }, c = function (a, c) {
      if (!angular.isArray(a))throw new Error("Roles must be an array");
      for (var d = 0; d < a.length; d++)b(a[d], c)
    };
    this.defineRole = function (c, d) {
      return b(c, d), a[c] = d, this
    }, this.$get = ["$q", function (d) {
      var e = {
        _promiseify: function (a) {
          if (a && angular.isFunction(a.then))return a;
          var b = d.defer();
          return a ? b.resolve() : b.reject(), b.promise
        }, _validateRoleMap: function (a) {
          if ("object" != typeof a || a instanceof Array)throw new Error("Role map has to be an object");
          if (void 0 === a.only && void 0 === a.except)throw new Error('Either "only" or "except" keys must me defined');
          if (a.only) {
            if (!(a.only instanceof Array))throw new Error("Array of roles expected")
          } else if (a.except && !(a.except instanceof Array))throw new Error("Array of roles expected")
        }, _findMatchingRole: function (a, b) {
          var c = angular.copy(a), f = d.defer(), g = c.shift();
          if (!g)return f.reject(), f.promise;
          if (!angular.isFunction(e.roleValidations[g]))throw new Error("undefined role or invalid role validation");
          var h = e.roleValidations[g](b, g);
          return h = e._promiseify(h), h.then(function () {
            f.resolve()
          }, function () {
            e._findMatchingRole(c, b).then(function () {
              f.resolve()
            }, function () {
              f.reject()
            })
          }), f.promise
        }, defineRole: function (a, c) {
          return b(a, c), e.roleValidations[a] = c, e
        }, defineManyRoles: function (a, b) {
          c(a, b);
          for (var d = e, f = 0; f < a.length; f++)d = d.defineRole(a[f], b);
          return d
        }, resolveIfMatch: function (a, b) {
          var c = angular.copy(a), f = d.defer();
          return e._findMatchingRole(c, b).then(function () {
            f.resolve()
          }, function () {
            f.reject()
          }), f.promise
        }, rejectIfMatch: function (a, b) {
          var c = d.defer();
          return e._findMatchingRole(a, b).then(function () {
            c.reject()
          }, function () {
            c.resolve()
          }), c.promise
        }, roleValidations: a, authorize: function (a, b) {
          e._validateRoleMap(a);
          var c;
          return c = a.only ? e.resolveIfMatch(a.only, b) : e.rejectIfMatch(a.except, b)
        }
      };
      return e
    }]
  })
}();
//# sourceMappingURL=angular-permission.min.js.map